// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using OnlineExamination.Entities;

namespace OnlineExamination.Context;

public partial class ExaminationSystemDBContext : DbContext
{
    public ExaminationSystemDBContext()
    {
    }

    public ExaminationSystemDBContext(DbContextOptions<ExaminationSystemDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Answer> Answers { get; set; }

    public virtual DbSet<Choice> Choices { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Exam> Exams { get; set; }

    public virtual DbSet<Instructor> Instructors { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<Student> Students { get; set; }

    public virtual DbSet<StudentAnswerInExam> StudentAnswerInExams { get; set; }

    public virtual DbSet<StudentCourse> StudentCourses { get; set; }

    public virtual DbSet<Topic> Topics { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=HASSAN-PC\\SQLEXPRESS01;Initial Catalog=ExaminationSystemDB;Integrated Security=True;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Answer>(entity =>
        {
            entity.HasOne(d => d.Question).WithMany(p => p.Answers).HasConstraintName("FK_Answers_Questions");
        });

        modelBuilder.Entity<Choice>(entity =>
        {
            entity.HasOne(d => d.Question).WithMany(p => p.Choices).HasConstraintName("FK_Choices_Questions");
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasMany(d => d.Ins).WithMany(p => p.Courses)
                .UsingEntity<Dictionary<string, object>>(
                    "CoursesInstructor",
                    r => r.HasOne<Instructor>().WithMany()
                        .HasForeignKey("InsId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Courses_Instructor_Instructors"),
                    l => l.HasOne<Course>().WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Courses_Instructor_Courses"),
                    j =>
                    {
                        j.HasKey("CourseId", "InsId");
                        j.ToTable("Courses_Instructor");
                        j.IndexerProperty<int>("CourseId").HasColumnName("Course_Id");
                        j.IndexerProperty<int>("InsId").HasColumnName("Ins_Id");
                    });
        });

        modelBuilder.Entity<Exam>(entity =>
        {
            entity.HasOne(d => d.Course).WithMany(p => p.Exams)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Exams_Courses");
        });

        modelBuilder.Entity<Instructor>(entity =>
        {
            entity.HasOne(d => d.Dept).WithMany(p => p.Instructors).HasConstraintName("FK_Instructors_Departments");
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasOne(d => d.Course).WithMany(p => p.Questions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Questions_Courses");

            entity.HasMany(d => d.Exams).WithMany(p => p.Questions)
                .UsingEntity<Dictionary<string, object>>(
                    "ExamQuestion",
                    r => r.HasOne<Exam>().WithMany()
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK_Exam_Questions_Exams"),
                    l => l.HasOne<Question>().WithMany()
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_Exam_Questions_Questions"),
                    j =>
                    {
                        j.HasKey("QuestionId", "ExamId");
                        j.ToTable("Exam_Questions");
                        j.IndexerProperty<int>("QuestionId").HasColumnName("Question_Id");
                        j.IndexerProperty<int>("ExamId").HasColumnName("Exam_ID");
                    });
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity.HasOne(d => d.Dept).WithMany(p => p.Students).HasConstraintName("FK_Students_Departments");
        });

        modelBuilder.Entity<StudentAnswerInExam>(entity =>
        {
            entity.HasOne(d => d.Exam).WithMany(p => p.StudentAnswerInExams).HasConstraintName("FK_Student_Answer_In_Exam_Exams");

            entity.HasOne(d => d.Question).WithMany(p => p.StudentAnswerInExams)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_Answer_In_Exam_Questions");

            entity.HasOne(d => d.Student).WithMany(p => p.StudentAnswerInExams)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_Answer_In_Exam_Students");
        });

        modelBuilder.Entity<StudentCourse>(entity =>
        {
            entity.HasOne(d => d.Course).WithMany(p => p.StudentCourses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_Courses_Courses");

            entity.HasOne(d => d.Student).WithMany(p => p.StudentCourses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_Courses_Students");
        });

        modelBuilder.Entity<Topic>(entity =>
        {
            entity.Property(e => e.TopicId).ValueGeneratedOnAdd();

            entity.HasOne(d => d.Course).WithMany(p => p.Topics)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Topic_Courses");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}